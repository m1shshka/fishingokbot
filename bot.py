import telegram
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
import os
import re

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
TOKEN = os.getenv("TELEGRAM_TOKEN", "7218177880:AAFUJtHajmMhSDTpHjrsVD8-tcejC3oZgkM")
ADMIN_CHAT_ID = "982825858"  # ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
CONSULTANT_CONTACTS = "TG: @pjvjcx\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: 8 950 792-01-70"

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
fish_data = {
    "predatory": {
        "üêü –°—É–¥–∞–∫": {
            "products": {
                "üé£ –°–ø–∏–Ω–Ω–∏–Ω–≥": { 
                    "price": 500, 
                    "deposit": 3000,
                    "description": "üé£ –°–ø–∏–Ω–Ω–∏–Ω–≥ –¥–ª—è –ª–æ–≤–ª–∏ —Å—É–¥–∞–∫–∞\nüí∏ –¶–µ–Ω–∞: 500 —Ä—É–±./–¥–µ–Ω—å\nüîí –ó–∞–ª–æ–≥: 3000 —Ä—É–±."
                },
                "üé£ –í–æ–±–ª–µ—Ä—ã": {
                    "price": 200,
                    "deposit": 1500,
                    "description": "üé£ –ù–∞–±–æ—Ä –≤–æ–±–ª–µ—Ä–æ–≤\nüí∏ –¶–µ–Ω–∞: 200 —Ä—É–±./–¥–µ–Ω—å\nüîí –ó–∞–ª–æ–≥: 1500 —Ä—É–±."
                }
            },
            "backMenu": "predatory"
        },
        "üêü –©—É–∫–∞": {
            "products": {
                "üé£ –°–ø–∏–Ω–Ω–∏–Ω–≥": {
                    "price": 600,
                    "deposit": 3500,
                    "description": "üé£ –°–ø–∏–Ω–Ω–∏–Ω–≥ –¥–ª—è –ª–æ–≤–ª–∏ —â—É–∫–∏\nüí∏ –¶–µ–Ω–∞: 600 —Ä—É–±./–¥–µ–Ω—å\nüîí –ó–∞–ª–æ–≥: 3500 —Ä—É–±."
                },
                "üé£ –ë–ª–µ—Å–Ω—ã": {
                    "price": 250,
                    "deposit": 1200,
                    "description": "üé£ –ù–∞–±–æ—Ä –±–ª–µ—Å–µ–Ω\nüí∏ –¶–µ–Ω–∞: 250 —Ä—É–±./–¥–µ–Ω—å\nüîí –ó–∞–ª–æ–≥: 1200 —Ä—É–±."
                }
            },
            "backMenu": "predatory"
        },
        "üêü –û–∫—É–Ω—å": {
            "products": {
                "üé£ –£–ª—å—Ç—Ä–∞–ª–∞–π—Ç": {
                    "price": 400,
                    "deposit": 2500,
                    "description": "üé£ –£–ª—å—Ç—Ä–∞–ª–∞–π—Ç —Å–ø–∏–Ω–Ω–∏–Ω–≥\nüí∏ –¶–µ–Ω–∞: 400 —Ä—É–±./–¥–µ–Ω—å\nüîí –ó–∞–ª–æ–≥: 2500 —Ä—É–±."
                },
                "üé£ –ú–∏–∫—Ä–æ–∫–æ–ª–µ–±–∞–ª–∫–∏": {
                    "price": 150,
                    "deposit": 800,
                    "description": "üé£ –ù–∞–±–æ—Ä –º–∏–∫—Ä–æ–∫–æ–ª–µ–±–∞–ª–æ–∫\nüí∏ –¶–µ–Ω–∞: 150 —Ä—É–±./–¥–µ–Ω—å\nüîí –ó–∞–ª–æ–≥: 800 —Ä—É–±."
                }
            },
            "backMenu": "predatory"
        }
    },
    "peaceful": {
        "üêü –ö–∞—Ä–∞—Å—å": {
            "products": {
                "üé£ –ü–æ–ø–ª–∞–≤–æ—á–Ω–∞—è —É–¥–æ—á–∫–∞": {
                    "price": 300,
                    "deposit": 1500,
                    "description": "üé£ –ü–æ–ø–ª–∞–≤–æ—á–Ω–∞—è —É–¥–æ—á–∫–∞\nüí∏ –¶–µ–Ω–∞: 300 —Ä—É–±./–¥–µ–Ω—å\nüîí –ó–∞–ª–æ–≥: 1500 —Ä—É–±."
                },
                "üé£ –ù–∞–∂–∏–≤–∫–∞": {
                    "price": 50,
                    "deposit": 0,
                    "description": "üé£ –ù–∞–∂–∏–≤–∫–∞ (–æ–ø–∞—Ä—ã—à)\nüí∏ –¶–µ–Ω–∞: 50 —Ä—É–±./—É–ø–∞–∫–æ–≤–∫–∞"
                }
            },
            "backMenu": "peaceful"
        },
        "üêü –ö–∞—Ä–ø": {
            "products": {
                "üé£ –î–æ–Ω–Ω–∞—è —Å–Ω–∞—Å—Ç—å": {
                    "price": 700,
                    "deposit": 5000,
                    "description": "üé£ –î–æ–Ω–Ω–∞—è —Å–Ω–∞—Å—Ç—å\nüí∏ –¶–µ–Ω–∞: 700 —Ä—É–±./–¥–µ–Ω—å\nüîí –ó–∞–ª–æ–≥: 5000 —Ä—É–±."
                },
                "üé£ –ë–æ–π–ª—ã": {
                    "price": 200,
                    "deposit": 0,
                    "description": "üé£ –ë–æ–π–ª—ã –¥–ª—è –∫–∞—Ä–ø–∞\nüí∏ –¶–µ–Ω–∞: 200 —Ä—É–±./–ø–∞–∫–µ—Ç"
                }
            },
            "backMenu": "peaceful"
        }
    },
    "additional": {
        "üõ†Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ": {
            "products": {
                "üõ†Ô∏è –ü–æ–¥—Å—Ç–∞–≤–∫–∏": {
                    "price": 50,
                    "deposit": 150,
                    "description": "üõ†Ô∏è –ü–æ–¥—Å—Ç–∞–≤–∫–∏ –ø–æ–¥ —É–¥–æ—á–∫–∏\nüí∏ –¶–µ–Ω–∞: 50 —Ä—É–±./—à—Ç\nüîí –ó–∞–ª–æ–≥: 150 —Ä—É–±."
                },
                "üõ†Ô∏è –°—Ç—É–ª": {
                    "price": 300,
                    "deposit": 1500,
                    "description": "üõ†Ô∏è –†–∞—Å–∫–ª–∞–¥–Ω–æ–π —Å—Ç—É–ª\nüí∏ –¶–µ–Ω–∞: 300 —Ä—É–±./–¥–µ–Ω—å\nüîí –ó–∞–ª–æ–≥: 1500 —Ä—É–±."
                },
                "üõ†Ô∏è –õ–æ–¥–∫–∞": {
                    "price": 500,
                    "deposit": 25000,
                    "description": "üõ†Ô∏è –ù–∞–¥—É–≤–Ω–∞—è –ª–æ–¥–∫–∞\nüí∏ –¶–µ–Ω–∞: 500 —Ä—É–±./–¥–µ–Ω—å\nüîí –ó–∞–ª–æ–≥: 25000 —Ä—É–±."
                }
            },
            "backMenu": "main"
        }
    }
}

# –ú–µ–Ω—é
menus = {
    "main": {
        "reply_markup": telegram.ReplyKeyboardMarkup([
            ["üé£ –•–∏—â–Ω–∞—è —Ä—ã–±–∞", "üé£ –ú–∏—Ä–Ω–∞—è —Ä—ã–±–∞"],
            ["üìã –û–±—â–∏–π –∫–∞—Ç–∞–ª–æ–≥", "‚ùì –í–ø–µ—Ä–≤—ã–µ –Ω–∞ —Ä—ã–±–∞–ª–∫–µ"],
            ["üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"]
        ], resize_keyboard=True)
    },
    "predatory": {
        "reply_markup": telegram.ReplyKeyboardMarkup([
            ["üêü –°—É–¥–∞–∫", "üêü –©—É–∫–∞", "üêü –û–∫—É–Ω—å"],
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ], resize_keyboard=True)
    },
    "peaceful": {
        "reply_markup": telegram.ReplyKeyboardMarkup([
            ["üêü –ö–∞—Ä–∞—Å—å", "üêü –ö–∞—Ä–ø"],
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ], resize_keyboard=True)
    }
}

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_state = {}

# –ü–∞—Ä—Å–µ—Ä –∑–∞–∫–∞–∑–æ–≤
def parse_order(text, selected_product):
    patterns = {
        "name": r"(?:–∏–º—è|name)[:\-\s]*(.+)",
        "phone": r"(?:—Ç–µ–ª|phone|—Ç–µ–ª–µ—Ñ–æ–Ω)[:\-\s]*(.+)",
        "address": r"(?:–∞–¥—Ä–µ—Å|address)[:\-\s]*(.+)",
        "quantity": r"(?:–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ|–∫–æ–ª-–≤–æ|quantity)[:\-\s]*(\d+)"
    }

    lines = text.split("\n")
    result = {}
    errors = []

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º
    for field, pattern in patterns.items():
        match = re.search(pattern, text, re.IGNORECASE)
        result[field] = match.group(1).strip() if match else None

    # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞–∑–±–æ—Ä, –µ—Å–ª–∏ —Ä–µ–≥—É–ª—è—Ä–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
    if not result["name"] and len(lines) > 0:
        result["name"] = lines[0].strip()
    if not result["phone"] and len(lines) > 1:
        result["phone"] = lines[1].strip()
    if not result["address"] and len(lines) > 2:
        result["address"] = lines[2].strip()
    if not result["quantity"] and len(lines) > 3:
        result["quantity"] = lines[3].strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if not result["name"]:
        errors.append("–ò–º—è")
    if not result["phone"]:
        errors.append("–¢–µ–ª–µ—Ñ–æ–Ω")
    if not result["address"]:
        errors.append("–ê–¥—Ä–µ—Å")

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if result["phone"]:
        result["phone"] = re.sub(r"[^\d+]", "", result["phone"])
        if not re.match(r"^\+?\d{10,15}$", result["phone"]):
            errors.append("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω")

    if errors:
        error_message = "üö´ –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –ø–æ–ª—è:\n" + "\n".join(errors)
        raise ValueError(error_message)

    return {
        "name": result["name"],
        "phone": result["phone"],
        "address": result["address"],
        "product": selected_product,
        "quantity": int(result["quantity"]) if result["quantity"] else 1
    }

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def notify_admin(context, order_data, username):
    username_text = f"@{username}" if username else "–Ω–µ —É–∫–∞–∑–∞–Ω"
    message = (
        f"üì¨ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
        f"üë§ –ò–º—è: {order_data['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order_data['phone']}\n"
        f"üè† –ê–¥—Ä–µ—Å: {order_data['address']}\n"
        f"üé£ –¢–æ–≤–∞—Ä: {order_data['product']}\n"
        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order_data['quantity']}\n"
        f"üÜî Telegram: {username_text}"
    )
    context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
def start(update, context):
    chat_id = update.message.chat.id
    user_state[chat_id] = {}
    welcome_text = f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {update.message.from_user.first_name}! üé£\n–Ø –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–Ω–∞—Å—Ç–∏ –¥–ª—è —Ä—ã–±–∞–ª–∫–∏.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:"
    update.message.reply_text(welcome_text, reply_markup=menus["main"].reply_markup)

def handle_menu_navigation(chat_id, menu_type, context):
    user_state[chat_id] = {"currentMenu": menu_type}
    context.bot.send_message(chat_id=chat_id, text="üêü –í—ã–±–µ—Ä–∏—Ç–µ —Ä—ã–±—É:", reply_markup=menus[menu_type].reply_markup)

def handle_back_navigation(update, context):
    chat_id = update.message.chat.id
    state = user_state.get(chat_id, {})
    
    if "currentFish" in state:
        category = state["currentCategory"]
        context.bot.send_message(chat_id=chat_id, text="üêü –í—ã–±–µ—Ä–∏—Ç–µ —Ä—ã–±—É:", reply_markup=menus[category].reply_markup)
        del state["currentFish"]
        del state["currentCategory"]
    else:
        context.bot.send_message(chat_id=chat_id, text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=menus["main"].reply_markup)
    if chat_id in user_state:
        del user_state[chat_id]

def show_products(chat_id, category, fish, context):
    fish_key = f"üêü {fish}"
    fish_data_category = fish_data[category]
    if fish_key not in fish_data_category:
        context.bot.send_message(chat_id=chat_id, text="üö´ –†—ã–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=menus["main"].reply_markup)
        return
    products = fish_data_category[fish_key]["products"]
    product_list = "\n\n".join(product["description"] for product in products.values())
    
    keyboard = telegram.ReplyKeyboardMarkup(
        [[product] for product in products.keys()] + [["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]],
        resize_keyboard=True
    )
    context.bot.send_message(
        chat_id=chat_id,
        text=f"üêü –î–ª—è {fish} –¥–æ—Å—Ç—É–ø–Ω—ã:\n\n{product_list}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∂–µ–ª–∞–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏:",
        reply_markup=keyboard
    )

def handle_general_catalog(update, context):
    chat_id = update.message.chat.id
    all_products = []
    for category in ["predatory", "peaceful"]:
        for fish in fish_data[category].values():
            all_products.extend(fish["products"].values())
    for additional in fish_data["additional"]["üõ†Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"]["products"].values():
        all_products.append(additional)

    product_list = "\n\n".join(product["description"] for product in all_products)
    
    keyboard = telegram.ReplyKeyboardMarkup(
        [[product] for category in ["predatory", "peaceful"] for fish in fish_data[category].values() for product in fish["products"].keys()] +
        [[product] for product in fish_data["additional"]["üõ†Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"]["products"].keys()] +
        [["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]],
        resize_keyboard=True
    )
    context.bot.send_message(
        chat_id=chat_id,
        text=f"üìã –ü–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ —Å–Ω–∞—Å—Ç–µ–π:\n\n{product_list}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∂–µ–ª–∞–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏:",
        reply_markup=keyboard
    )
    user_state[chat_id] = {"inGeneralCatalog": True}

def handle_first_time(update, context):
    chat_id = update.message.chat.id
    text = f"‚ùì –ï—Å–ª–∏ –≤—ã –Ω–æ–≤–∏—á–æ–∫:\n{CONSULTANT_CONTACTS}\n\n–ú—ã –ø–æ–º–æ–∂–µ–º —Å –≤—ã–±–æ—Ä–æ–º —Å–Ω–∞—Å—Ç–µ–π!"
    context.bot.send_message(chat_id=chat_id, text=text)

def handle_contacts(update, context):
    chat_id = update.message.chat.id
    context.bot.send_message(chat_id=chat_id, text=f"üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n{CONSULTANT_CONTACTS}")

def request_order_details(chat_id, product_name, context):
    context.bot.send_message(
        chat_id=chat_id,
        text=(
            f"üìù –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã {product_name} –≤–≤–µ–¥–∏—Ç–µ:\n\n"
            "üë§ –ò–º—è:\nüìû –¢–µ–ª–µ—Ñ–æ–Ω:\nüè† –ê–¥—Ä–µ—Å:\nüî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n–ò–º—è: –ò–≤–∞–Ω\n–¢–µ–ª–µ—Ñ–æ–Ω: +79123456789\n–ê–¥—Ä–µ—Å: –ú–æ—Å–∫–≤–∞\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1"
        )
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_message(update, context):
    chat_id = update.message.chat.id
    text = update.message.text
    state = user_state.get(chat_id, {})

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é
    if text == "üé£ –•–∏—â–Ω–∞—è —Ä—ã–±–∞":
        handle_menu_navigation(chat_id, "predatory", context)
        return
    elif text == "üé£ –ú–∏—Ä–Ω–∞—è —Ä—ã–±–∞":
        handle_menu_navigation(chat_id, "peaceful", context)
        return
    elif text == "üìã –û–±—â–∏–π –∫–∞—Ç–∞–ª–æ–≥":
        handle_general_catalog(update, context)
        return
    elif text == "‚ùì –í–ø–µ—Ä–≤—ã–µ –Ω–∞ —Ä—ã–±–∞–ª–∫–µ":
        handle_first_time(update, context)
        return
    elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        handle_contacts(update, context)
        return
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        handle_back_navigation(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä—ã–±—ã
    if text in ["üêü –°—É–¥–∞–∫", "üêü –©—É–∫–∞", "üêü –û–∫—É–Ω—å", "üêü –ö–∞—Ä–∞—Å—å", "üêü –ö–∞—Ä–ø"]:
        fish = text.replace("üêü ", "")
        category = "predatory" if text in ["üêü –°—É–¥–∞–∫", "üêü –©—É–∫–∞", "üêü –û–∫—É–Ω—å"] else "peaceful"
        user_state[chat_id] = {"currentFish": fish, "currentCategory": category}
        show_products(chat_id, category, fish, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
    products = [
        "üé£ –°–ø–∏–Ω–Ω–∏–Ω–≥", "üé£ –í–æ–±–ª–µ—Ä—ã", "üé£ –ë–ª–µ—Å–Ω—ã", "üé£ –£–ª—å—Ç—Ä–∞–ª–∞–π—Ç", "üé£ –ú–∏–∫—Ä–æ–∫–æ–ª–µ–±–∞–ª–∫–∏",
        "üé£ –ü–æ–ø–ª–∞–≤–æ—á–Ω–∞—è —É–¥–æ—á–∫–∞", "üé£ –ù–∞–∂–∏–≤–∫–∞", "üé£ –î–æ–Ω–Ω–∞—è —Å–Ω–∞—Å—Ç—å", "üé£ –ë–æ–π–ª—ã",
        "üõ†Ô∏è –ü–æ–¥—Å—Ç–∞–≤–∫–∏", "üõ†Ô∏è –°—Ç—É–ª", "üõ†Ô∏è –õ–æ–¥–∫–∞"
    ]
    if text in products:
        clean_product_name = text.replace("üé£ ", "").replace("üõ†Ô∏è ", "")
        if text in ["üõ†Ô∏è –ü–æ–¥—Å—Ç–∞–≤–∫–∏", "üõ†Ô∏è –°—Ç—É–ª", "üõ†Ô∏è –õ–æ–¥–∫–∞"]:
            user_state[chat_id] = {"selectedProduct": text}
        else:
            user_state[chat_id]["selectedProduct"] = text
        request_order_details(chat_id, clean_product_name, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
    if "selectedProduct" in state:
        try:
            clean_product_name = state["selectedProduct"].replace("üé£ ", "").replace("üõ†Ô∏è ", "")
            order_data = parse_order(text, clean_product_name)
            order_data["chat_id"] = chat_id
            order_data["username"] = update.message.from_user.username
            notify_admin(context, order_data, update.message.from_user.username)
            context.bot.send_message(
                chat_id=chat_id,
                text=f"‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\nüé£ {order_data['product']}\nüî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order_data['quantity']}\nüìû –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä.",
                reply_markup=menus["main"].reply_markup
            )
            del user_state[chat_id]
        except ValueError as e:
            context.bot.send_message(chat_id=chat_id, text=str(e))

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    updater = Updater(token=TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
    WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://your-render-app.onrender.com/")
    PORT = int(os.environ.get("PORT", 10000))
    updater.start_webhook(listen="0.0.0.0",
                          port=PORT,
                          url_path=TOKEN,
                          webhook_url=WEBHOOK_URL + TOKEN)
    updater.idle()

if __name__ == "__main__":
    main()
